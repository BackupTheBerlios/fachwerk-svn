/*
 * clOberfläche.java
 *
 * Created on 6. September 2003, 10:37
 */

package Fachwerk3D.gui3D;

import java.util.*;
import Fachwerk.gui.clStringDialog;

/**
 * Fachwerk3D - treillis3D
 *
 * Copyright (c) 2003 - 2006 A.Vontobel <qwert2003@users.sourceforge.net>
 *                                      <qwert2003@users.berlios.de>
 *
 * Das Programm enthält bestimmt noch FEHLER. Sämtliche Resultate sind
 * SORGFÄLTIG auf ihre PLAUSIBILITäT zu prüfen!
 *
 * Dieses einfache Fachwerkprogramm verwendet ausschliesslich die
 * Gleichgewichtsbedingungen zur Bestimmung der Stabkräfte.
 * Bei statisch unbestimmten Systemen können die überzähligen Stabkräfte
 * zugewiesen werden.
 * Das Programm bezweckt, die Anwendung des unteren (statischen)
 * Grenzwertsatzes der Plastizitätstheorie zu erleichtern.
 *
 * -------------------------------------------------------------
 *
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen
 * der GNU General Public License, Version 2, wie von der Free Software
 * Foundation herausgegeben, weitergeben und/oder modifizieren.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, dass es
 * Ihnen von Nutzen sein wird, aber OHNE JEDE GEWÄHRLEISTUNG - sogar ohne
 * die implizite Gewährleistung der MARKTREIFE oder der EIGNUNG FüR EINEN
 * BESTIMMTEN ZWECK.  Details finden Sie in der GNU General Public License.
 *
 * Sie sollten eine Kopie der GNU General Public License zusammen  mit
 * diesem Programm erhalten haben. Falls nicht, schreiben Sie an die
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA. 
 */
public abstract class clOberflaeche3D extends javax.swing.JFrame {
    
    protected Locale locale;
    protected ResourceBundle menuRB;
    
    /** Creates new form clOberfläche */
    
    public clOberflaeche3D(String titel, Locale lc) {
        super(titel);
        locale = lc;        
        initComponents();
        tastenbelegen();
        übersetzen(locale);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        WerkzeugPanel = new javax.swing.JPanel();
        sliderVertical = new javax.swing.JSlider();
        knopfBerechnen = new javax.swing.JButton();
        knopfZurücksetzen = new javax.swing.JButton();
        knopfKnoten = new javax.swing.JToggleButton();
        knopfStab = new javax.swing.JToggleButton();
        LayerPanel = new javax.swing.JPanel();
        knopfHintergrund = new javax.swing.JToggleButton();
        knopfKnNr = new javax.swing.JToggleButton();
        knopfStNr = new javax.swing.JToggleButton();
        knopfKraft = new javax.swing.JToggleButton();
        knopfLast = new javax.swing.JToggleButton();
        knopfLagerKr = new javax.swing.JToggleButton();
        StatusLeistePanel = new javax.swing.JPanel();
        StatusTextPanel = new javax.swing.JPanel();
        feldStatuszeile = new javax.swing.JTextField();
        StatusFwPanel = new javax.swing.JPanel();
        feldStatusFw = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        feldX = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        feldZ = new javax.swing.JTextField();
        weiteresWerkzeugPanel = new javax.swing.JPanel();
        sliderHorizontal = new javax.swing.JSlider();
        knopfZoomAll = new javax.swing.JButton();
        knopfZoomOut = new javax.swing.JButton();
        knopfZoomMaus = new javax.swing.JToggleButton();
        jSeparator6 = new javax.swing.JSeparator();
        knopfNeuerKn = new javax.swing.JToggleButton();
        knopfNeuerKnSnap = new javax.swing.JToggleButton();
        knopfNeuerStab = new javax.swing.JToggleButton();
        knopfLöschen = new javax.swing.JButton();
        knopfAllesZurücksetzen = new javax.swing.JButton();
        knopfEigenschaften = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuProg = new javax.swing.JMenu();
        itemSpeichern = new javax.swing.JMenuItem();
        itemDrucken = new javax.swing.JMenuItem();
        itemDruckenGraph = new javax.swing.JMenuItem();
        itemLaden = new javax.swing.JMenuItem();
        itemLadenHintergrund = new javax.swing.JMenuItem();
        itemNeu = new javax.swing.JMenuItem();
        submenuSprache = new javax.swing.JMenu();
        itemSystem = new javax.swing.JMenuItem();
        itemDe = new javax.swing.JMenuItem();
        itemEn = new javax.swing.JMenuItem();
        itemFr = new javax.swing.JMenuItem();
        itemInput = new javax.swing.JMenuItem();
        itemBeenden = new javax.swing.JMenuItem();
        menuAnsicht = new javax.swing.JMenu();
        itemNeuzeichnen = new javax.swing.JMenuItem();
        itemZoomAll = new javax.swing.JMenuItem();
        itemZoomxy = new javax.swing.JMenuItem();
        itemBlickrtg = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        itemHintergrundAnzeigen = new javax.swing.JCheckBoxMenuItem();
        itemKnotenNrAnzeigen = new javax.swing.JCheckBoxMenuItem();
        itemStabNrAnzeigen = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        itemKraftAnzeigen = new javax.swing.JCheckBoxMenuItem();
        itemLastenAnzeigen = new javax.swing.JCheckBoxMenuItem();
        itemLagerKrAnzeigen = new javax.swing.JCheckBoxMenuItem();
        menuFachwerk = new javax.swing.JMenu();
        itemPktselekt = new javax.swing.JMenuItem();
        itemStabselekt = new javax.swing.JMenuItem();
        itemNeuerPkt = new javax.swing.JMenuItem();
        itemNeuerStab = new javax.swing.JMenuItem();
        itemLöschen = new javax.swing.JMenuItem();
        itemAllesZurücksetzen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        itemEigenschaften = new javax.swing.JMenuItem();
        menuRechnen = new javax.swing.JMenu();
        itemBerechnen = new javax.swing.JMenuItem();
        itemZurücksetzen = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        buttonVerbose = new javax.swing.JCheckBoxMenuItem();
        buttonGLS = new javax.swing.JCheckBoxMenuItem();
        buttonMechanismus = new javax.swing.JCheckBoxMenuItem();
        menuAddins = new javax.swing.JMenu();
        itemKoordTransFWK = new javax.swing.JMenuItem();
        itemKoordTransDXF = new javax.swing.JMenuItem();
        itemSkaliereLasten = new javax.swing.JMenuItem();
        itemExportInput = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        itemFindeOrt = new javax.swing.JMenuItem();
        menuHilfe = new javax.swing.JMenu();
        itemHilfe = new javax.swing.JMenuItem();
        itemAbout = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        itemBsp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        WerkzeugPanel.setLayout(new java.awt.GridLayout(0, 1));

        sliderVertical.setMajorTickSpacing(90);
        sliderVertical.setMaximum(90);
        sliderVertical.setMinimum(-90);
        sliderVertical.setMinorTickSpacing(10);
        sliderVertical.setOrientation(javax.swing.JSlider.VERTICAL);
        sliderVertical.setPaintLabels(true);
        sliderVertical.setPaintTicks(true);
        sliderVertical.setSnapToTicks(true);
        sliderVertical.setToolTipText("vertical");
        sliderVertical.setMaximumSize(new java.awt.Dimension(16, 32767));
        sliderVertical.setPreferredSize(new java.awt.Dimension(16, 100));
        sliderVertical.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderVerticalMouseReleased(evt);
            }
        });
        sliderVertical.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sliderVerticalMouseDragged(evt);
            }
        });

        WerkzeugPanel.add(sliderVertical);

        knopfBerechnen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/rechnen.png")));
        knopfBerechnen.setToolTipText("berechnen");
        knopfBerechnen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfBerechnenActionPerformed(evt);
            }
        });

        WerkzeugPanel.add(knopfBerechnen);

        knopfZurücksetzen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/rotation.png")));
        knopfZurücksetzen.setToolTipText("Berechnung zur\u00fccksetzen");
        knopfZurücksetzen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfZurücksetzenActionPerformed(evt);
            }
        });

        WerkzeugPanel.add(knopfZurücksetzen);

        knopfKnoten.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/knotenselektieren.png")));
        knopfKnoten.setToolTipText("Knoten selektieren");
        knopfKnoten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfKnotenActionPerformed(evt);
            }
        });

        WerkzeugPanel.add(knopfKnoten);

        knopfStab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/stabselektieren.png")));
        knopfStab.setToolTipText("Stab selektieren");
        knopfStab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfStabActionPerformed(evt);
            }
        });

        WerkzeugPanel.add(knopfStab);

        getContentPane().add(WerkzeugPanel, java.awt.BorderLayout.WEST);

        LayerPanel.setLayout(new java.awt.GridLayout(0, 1));

        knopfHintergrund.setFont(new java.awt.Font("Dialog", 0, 9));
        knopfHintergrund.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/dxf.png")));
        knopfHintergrund.setText("dxf");
        knopfHintergrund.setToolTipText("Hintergrund anzeigen");
        knopfHintergrund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfHintergrundActionPerformed(evt);
            }
        });

        LayerPanel.add(knopfHintergrund);

        knopfKnNr.setFont(new java.awt.Font("Dialog", 0, 9));
        knopfKnNr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Knoten.png")));
        knopfKnNr.setText("Nr");
        knopfKnNr.setToolTipText("Knotennummern anzeigen");
        knopfKnNr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfKnNrActionPerformed(evt);
            }
        });

        LayerPanel.add(knopfKnNr);

        knopfStNr.setFont(new java.awt.Font("Dialog", 0, 9));
        knopfStNr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Stab.png")));
        knopfStNr.setText("Nr");
        knopfStNr.setToolTipText("Stabnummern anzeigen");
        knopfStNr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfStNrActionPerformed(evt);
            }
        });

        LayerPanel.add(knopfStNr);

        knopfKraft.setFont(new java.awt.Font("Dialog", 0, 9));
        knopfKraft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/anschreiben.png")));
        knopfKraft.setText("kN");
        knopfKraft.setToolTipText("Stabkr\u00e4fte anzeigen");
        knopfKraft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfKraftActionPerformed(evt);
            }
        });

        LayerPanel.add(knopfKraft);

        knopfLast.setFont(new java.awt.Font("Dialog", 0, 9));
        knopfLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Last.png")));
        knopfLast.setText("kN");
        knopfLast.setToolTipText("Lasten anzeigen");
        knopfLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfLastActionPerformed(evt);
            }
        });

        LayerPanel.add(knopfLast);

        knopfLagerKr.setFont(new java.awt.Font("Dialog", 0, 9));
        knopfLagerKr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Lager.png")));
        knopfLagerKr.setText("kN");
        knopfLagerKr.setToolTipText("Lagerkr\u00e4fte anzeigen");
        knopfLagerKr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfLagerKrActionPerformed(evt);
            }
        });

        LayerPanel.add(knopfLagerKr);

        getContentPane().add(LayerPanel, java.awt.BorderLayout.EAST);

        StatusLeistePanel.setLayout(new java.awt.GridBagLayout());

        StatusLeistePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        StatusTextPanel.setLayout(new java.awt.GridLayout(1, 0));

        feldStatuszeile.setEditable(false);
        StatusTextPanel.add(feldStatuszeile);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        StatusLeistePanel.add(StatusTextPanel, gridBagConstraints);

        StatusFwPanel.setLayout(new java.awt.GridLayout(1, 0));

        feldStatusFw.setColumns(11);
        feldStatusFw.setEditable(false);
        feldStatusFw.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        StatusFwPanel.add(feldStatusFw);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        StatusLeistePanel.add(StatusFwPanel, gridBagConstraints);

        jLabel1.setText(""+'\u03BE'); // xsi
        jPanel1.add(jLabel1);

        feldX.setColumns(5);
        feldX.setEditable(false);
        jPanel1.add(feldX);

        jLabel2.setText(""+'\u03B6'); // zeta
        jPanel1.add(jLabel2);

        feldZ.setColumns(5);
        feldZ.setEditable(false);
        jPanel1.add(feldZ);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        StatusLeistePanel.add(jPanel1, gridBagConstraints);

        getContentPane().add(StatusLeistePanel, java.awt.BorderLayout.SOUTH);

        weiteresWerkzeugPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        sliderHorizontal.setMajorTickSpacing(90);
        sliderHorizontal.setMaximum(180);
        sliderHorizontal.setMinimum(-180);
        sliderHorizontal.setMinorTickSpacing(10);
        sliderHorizontal.setPaintLabels(true);
        sliderHorizontal.setPaintTicks(true);
        sliderHorizontal.setSnapToTicks(true);
        sliderHorizontal.setToolTipText("horizontal");
        sliderHorizontal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderHorizontalMouseReleased(evt);
            }
        });
        sliderHorizontal.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sliderHorizontalMouseDragged(evt);
            }
        });

        weiteresWerkzeugPanel.add(sliderHorizontal);

        knopfZoomAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/center.png")));
        knopfZoomAll.setToolTipText("zoom alles");
        knopfZoomAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfZoomAllActionPerformed(evt);
            }
        });

        weiteresWerkzeugPanel.add(knopfZoomAll);

        knopfZoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/zoomout.png")));
        knopfZoomOut.setToolTipText("zoom verkleinern");
        knopfZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfZoomOutActionPerformed(evt);
            }
        });

        weiteresWerkzeugPanel.add(knopfZoomOut);

        knopfZoomMaus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/zoom.png")));
        knopfZoomMaus.setToolTipText("zoom");
        knopfZoomMaus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfZoomMausActionPerformed(evt);
            }
        });

        weiteresWerkzeugPanel.add(knopfZoomMaus);

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator6.setEnabled(false);
        jSeparator6.setPreferredSize(new java.awt.Dimension(0, 15));
        weiteresWerkzeugPanel.add(jSeparator6);

        knopfNeuerKn.setFont(new java.awt.Font("Dialog", 0, 9));
        knopfNeuerKn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Knoten.png")));
        knopfNeuerKn.setText("neu");
        knopfNeuerKn.setToolTipText("neuer Knoten");
        knopfNeuerKn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfNeuerKnActionPerformed(evt);
            }
        });

        weiteresWerkzeugPanel.add(knopfNeuerKn);

        knopfNeuerKnSnap.setFont(new java.awt.Font("Dialog", 0, 9));
        knopfNeuerKnSnap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Knoten.png")));
        knopfNeuerKnSnap.setText("snap");
        knopfNeuerKnSnap.setToolTipText("neuer Knoten");
        knopfNeuerKnSnap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfNeuerKnSnapActionPerformed(evt);
            }
        });

        weiteresWerkzeugPanel.add(knopfNeuerKnSnap);

        knopfNeuerStab.setFont(new java.awt.Font("Dialog", 0, 9));
        knopfNeuerStab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Stab.png")));
        knopfNeuerStab.setText("neu");
        knopfNeuerStab.setToolTipText("neuer Stab");
        knopfNeuerStab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfNeuerStabActionPerformed(evt);
            }
        });

        weiteresWerkzeugPanel.add(knopfNeuerStab);

        knopfLöschen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/eraser.png")));
        knopfLöschen.setToolTipText("markierten Knoten/Stab l\u00f6schen");
        knopfLöschen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfLöschenActionPerformed(evt);
            }
        });

        weiteresWerkzeugPanel.add(knopfLöschen);

        knopfAllesZurücksetzen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/clear_left.png")));
        knopfAllesZurücksetzen.setToolTipText("alle gesetzten Stabkr\u00e4fte l\u00f6schen");
        knopfAllesZurücksetzen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfAllesZurücksetzenActionPerformed(evt);
            }
        });

        weiteresWerkzeugPanel.add(knopfAllesZurücksetzen);

        knopfEigenschaften.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/eigenschaften.png")));
        knopfEigenschaften.setToolTipText("Eigenschaften des selektierten Objekts");
        knopfEigenschaften.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfEigenschaftenActionPerformed(evt);
            }
        });

        weiteresWerkzeugPanel.add(knopfEigenschaften);

        getContentPane().add(weiteresWerkzeugPanel, java.awt.BorderLayout.NORTH);

        menuProg.setText("Programm");
        itemSpeichern.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/tofile.png")));
        itemSpeichern.setText("speichern");
        itemSpeichern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSpeichernActionPerformed(evt);
            }
        });

        menuProg.add(itemSpeichern);

        itemDrucken.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/fileprint.png")));
        itemDrucken.setText("drucken");
        itemDrucken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDruckenActionPerformed(evt);
            }
        });

        menuProg.add(itemDrucken);

        itemDruckenGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/fileprint.png")));
        itemDruckenGraph.setText("drucken Graph");
        itemDruckenGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDruckenGraphActionPerformed(evt);
            }
        });

        menuProg.add(itemDruckenGraph);

        itemLaden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/fileopen.png")));
        itemLaden.setText("laden");
        itemLaden.setToolTipText("");
        itemLaden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemLadenActionPerformed(evt);
            }
        });

        menuProg.add(itemLaden);

        itemLadenHintergrund.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/dxf.png")));
        itemLadenHintergrund.setText("Hintergrund laden");
        itemLadenHintergrund.setToolTipText("");
        itemLadenHintergrund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemLadenHintergrundActionPerformed(evt);
            }
        });

        menuProg.add(itemLadenHintergrund);

        itemNeu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/neu.png")));
        itemNeu.setText("neu");
        itemNeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNeuActionPerformed(evt);
            }
        });

        menuProg.add(itemNeu);

        submenuSprache.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/locale.png")));
        submenuSprache.setText("language");
        itemSystem.setText("system");
        itemSystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSystemActionPerformed(evt);
            }
        });

        submenuSprache.add(itemSystem);

        itemDe.setText("deutsch");
        itemDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDeActionPerformed(evt);
            }
        });

        submenuSprache.add(itemDe);

        itemEn.setText("english");
        itemEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEnActionPerformed(evt);
            }
        });

        submenuSprache.add(itemEn);

        itemFr.setText("fran\u00e7ais");
        itemFr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFrActionPerformed(evt);
            }
        });

        submenuSprache.add(itemFr);

        itemInput.setText("....");
        itemInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemInputActionPerformed(evt);
            }
        });

        submenuSprache.add(itemInput);

        menuProg.add(submenuSprache);

        itemBeenden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/exit.png")));
        itemBeenden.setText("beenden");
        itemBeenden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemBeendenActionPerformed(evt);
            }
        });

        menuProg.add(itemBeenden);

        jMenuBar1.add(menuProg);

        menuAnsicht.setText("Ansicht");
        itemNeuzeichnen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/designer.png")));
        itemNeuzeichnen.setText("neu zeichnen");
        itemNeuzeichnen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNeuzeichnenActionPerformed(evt);
            }
        });

        menuAnsicht.add(itemNeuzeichnen);

        itemZoomAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/center.png")));
        itemZoomAll.setText("zoom all");
        itemZoomAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZoomAllActionPerformed(evt);
            }
        });

        menuAnsicht.add(itemZoomAll);

        itemZoomxy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/zoom.png")));
        itemZoomxy.setText("zoom xy");
        itemZoomxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZoomxyActionPerformed(evt);
            }
        });

        menuAnsicht.add(itemZoomxy);

        itemBlickrtg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk3D/gui3D/icons/camera.png")));
        itemBlickrtg.setText("Blickrichtung");
        itemBlickrtg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemBlickrtgActionPerformed(evt);
            }
        });

        menuAnsicht.add(itemBlickrtg);

        menuAnsicht.add(jSeparator3);

        itemHintergrundAnzeigen.setText("Hintergrund anzeigen");
        itemHintergrundAnzeigen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/dxf.png")));
        itemHintergrundAnzeigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemHintergrundAnzeigenActionPerformed(evt);
            }
        });

        menuAnsicht.add(itemHintergrundAnzeigen);

        itemKnotenNrAnzeigen.setText("Knotennummern anzeigen");
        itemKnotenNrAnzeigen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Knoten.png")));
        itemKnotenNrAnzeigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemKnotenNrAnzeigenActionPerformed(evt);
            }
        });

        menuAnsicht.add(itemKnotenNrAnzeigen);

        itemStabNrAnzeigen.setText("Stabnummern anzeigen");
        itemStabNrAnzeigen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Stab.png")));
        itemStabNrAnzeigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemStabNrAnzeigenActionPerformed(evt);
            }
        });

        menuAnsicht.add(itemStabNrAnzeigen);

        menuAnsicht.add(jSeparator4);

        itemKraftAnzeigen.setText("Stabkr\u00e4fte anzeigen");
        itemKraftAnzeigen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/anschreiben.png")));
        itemKraftAnzeigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemKraftAnzeigenActionPerformed(evt);
            }
        });

        menuAnsicht.add(itemKraftAnzeigen);

        itemLastenAnzeigen.setText("Lasten anzeigen");
        itemLastenAnzeigen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Last.png")));
        itemLastenAnzeigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemLastenAnzeigenActionPerformed(evt);
            }
        });

        menuAnsicht.add(itemLastenAnzeigen);

        itemLagerKrAnzeigen.setText("Auflagerkr\u00e4fte anzeigen");
        itemLagerKrAnzeigen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Lager.png")));
        itemLagerKrAnzeigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemLagerKrAnzeigenActionPerformed(evt);
            }
        });

        menuAnsicht.add(itemLagerKrAnzeigen);

        jMenuBar1.add(menuAnsicht);

        menuFachwerk.setText("Fachwerk");
        itemPktselekt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/knotenselektieren.png")));
        itemPktselekt.setText("selektiere Knoten Nr ..");
        itemPktselekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPktselektActionPerformed(evt);
            }
        });

        menuFachwerk.add(itemPktselekt);

        itemStabselekt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/stabselektieren.png")));
        itemStabselekt.setText("selektiere Stab Nr ..");
        itemStabselekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemStabselektActionPerformed(evt);
            }
        });

        menuFachwerk.add(itemStabselekt);

        itemNeuerPkt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Knoten.png")));
        itemNeuerPkt.setText("erstelle neuen Knoten");
        itemNeuerPkt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNeuerPktActionPerformed(evt);
            }
        });

        menuFachwerk.add(itemNeuerPkt);

        itemNeuerStab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Stab.png")));
        itemNeuerStab.setText("erstelle neuen Stab");
        itemNeuerStab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNeuerStabActionPerformed(evt);
            }
        });

        menuFachwerk.add(itemNeuerStab);

        itemLöschen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/eraser.png")));
        itemLöschen.setText("l\u00f6schen");
        itemLöschen.setToolTipText("selektierten Stab oder Knoten l\u00f6schen");
        itemLöschen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemLöschenActionPerformed(evt);
            }
        });

        menuFachwerk.add(itemLöschen);

        itemAllesZurücksetzen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/clear_left.png")));
        itemAllesZurücksetzen.setText("alles zur\u00fccksetzen");
        itemAllesZurücksetzen.setToolTipText("alle gesetzten Stabkr\u00e4fte l\u00f6schen");
        itemAllesZurücksetzen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAllesZurücksetzenActionPerformed(evt);
            }
        });

        menuFachwerk.add(itemAllesZurücksetzen);

        menuFachwerk.add(jSeparator1);

        itemEigenschaften.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/eigenschaften.png")));
        itemEigenschaften.setText("Eigenschaften");
        itemEigenschaften.setToolTipText("Eigenschaften des selektierten Objekts");
        itemEigenschaften.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEigenschaftenActionPerformed(evt);
            }
        });

        menuFachwerk.add(itemEigenschaften);

        jMenuBar1.add(menuFachwerk);

        menuRechnen.setText("Rechnen");
        itemBerechnen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/rechnen.png")));
        itemBerechnen.setText("berechnen");
        itemBerechnen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemBerechnenActionPerformed(evt);
            }
        });

        menuRechnen.add(itemBerechnen);

        itemZurücksetzen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/rotation.png")));
        itemZurücksetzen.setText("zur\u00fccksetzen");
        itemZurücksetzen.setToolTipText("Berechnung zur\u00fccksetzen");
        itemZurücksetzen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZurücksetzenActionPerformed(evt);
            }
        });

        menuRechnen.add(itemZurücksetzen);

        menuRechnen.add(jSeparator2);

        buttonVerbose.setText("verbose");
        buttonVerbose.setToolTipText("set verbose console output");
        buttonVerbose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVerboseActionPerformed(evt);
            }
        });

        menuRechnen.add(buttonVerbose);

        buttonGLS.setSelected(true);
        buttonGLS.setText("Gleichungssystem l\u00f6sen");
        buttonGLS.setToolTipText("Bestimmt die statisch bestimmten Stabkr\u00e4fte durch num. L\u00f6sen einen GLS.");
        buttonGLS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGLSActionPerformed(evt);
            }
        });

        menuRechnen.add(buttonGLS);

        buttonMechanismus.setSelected(true);
        buttonMechanismus.setText("Mechanismen testen");
        buttonMechanismus.setToolTipText("Sucht Mechanismen, die eine Gleichgewichtsverletzung belegen. Kinematische Methode.");
        buttonMechanismus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMechanismusActionPerformed(evt);
            }
        });

        menuRechnen.add(buttonMechanismus);

        jMenuBar1.add(menuRechnen);

        menuAddins.setText("Zus\u00e4tze");
        itemKoordTransFWK.setText("Koordinaten transformieren");
        itemKoordTransFWK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemKoordTransFWKActionPerformed(evt);
            }
        });

        menuAddins.add(itemKoordTransFWK);

        itemKoordTransDXF.setText("Hintergrundbild transformieren");
        itemKoordTransDXF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemKoordTransDXFActionPerformed(evt);
            }
        });

        menuAddins.add(itemKoordTransDXF);

        itemSkaliereLasten.setText("skaliere Lasten");
        itemSkaliereLasten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSkaliereLastenActionPerformed(evt);
            }
        });

        menuAddins.add(itemSkaliereLasten);

        itemExportInput.setText("Export Input");
        itemExportInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemExportInputActionPerformed(evt);
            }
        });

        menuAddins.add(itemExportInput);

        menuAddins.add(jSeparator7);

        itemFindeOrt.setText("finde Ort");
        itemFindeOrt.setEnabled(false);
        itemFindeOrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFindeOrtActionPerformed(evt);
            }
        });

        menuAddins.add(itemFindeOrt);

        jMenuBar1.add(menuAddins);

        menuHilfe.setText("Hilfe");
        itemHilfe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/help.png")));
        itemHilfe.setText("Hilfe");
        itemHilfe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemHilfeActionPerformed(evt);
            }
        });

        menuHilfe.add(itemHilfe);

        itemAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/info.png")));
        itemAbout.setText("Info");
        itemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAboutActionPerformed(evt);
            }
        });

        menuHilfe.add(itemAbout);

        menuHilfe.add(jSeparator5);

        itemBsp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/Bsp.png")));
        itemBsp.setText("Beispiel laden");
        itemBsp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemBspActionPerformed(evt);
            }
        });

        menuHilfe.add(itemBsp);

        jMenuBar1.add(menuHilfe);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        nachrichtMausRadGedreht(evt);
    }//GEN-LAST:event_formMouseWheelMoved

    private void buttonMechanismusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMechanismusActionPerformed
        befehlOptionMechanismus(buttonMechanismus.isSelected());
    }//GEN-LAST:event_buttonMechanismusActionPerformed

    private void itemSkaliereLastenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSkaliereLastenActionPerformed
        befehlAddinSkaliereLasten();
    }//GEN-LAST:event_itemSkaliereLastenActionPerformed

    private void buttonVerboseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVerboseActionPerformed
        befehlOptionVerbose(buttonVerbose.isSelected());
    }//GEN-LAST:event_buttonVerboseActionPerformed

    private void itemExportInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemExportInputActionPerformed
        befehlAddinExportInput();
    }//GEN-LAST:event_itemExportInputActionPerformed

    private void knopfNeuerKnSnapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfNeuerKnSnapActionPerformed
        befehlErstelleNeuenKnotenSnap(knopfNeuerKnSnap.isSelected());
    }//GEN-LAST:event_knopfNeuerKnSnapActionPerformed

    private void sliderVerticalMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderVerticalMouseDragged
        befehlBlickrtgMaus(sliderHorizontal.getValue(), sliderVertical.getValue());
    }//GEN-LAST:event_sliderVerticalMouseDragged

    private void sliderHorizontalMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderHorizontalMouseDragged
        befehlBlickrtgMaus(sliderHorizontal.getValue(), sliderVertical.getValue());
    }//GEN-LAST:event_sliderHorizontalMouseDragged

    private void sliderHorizontalMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderHorizontalMouseReleased
        befehlBlickrtgMaus(sliderHorizontal.getValue(), sliderVertical.getValue());
    }//GEN-LAST:event_sliderHorizontalMouseReleased

    private void sliderVerticalMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderVerticalMouseReleased
        befehlBlickrtgMaus(sliderHorizontal.getValue(), sliderVertical.getValue());
    }//GEN-LAST:event_sliderVerticalMouseReleased

    private void itemBlickrtgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemBlickrtgActionPerformed
        befehlBlickrtg();
    }//GEN-LAST:event_itemBlickrtgActionPerformed

    private void knopfZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfZoomOutActionPerformed
        befehlZoomOut();
    }//GEN-LAST:event_knopfZoomOutActionPerformed

    private void itemKoordTransDXFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemKoordTransDXFActionPerformed
        befehlAddinKoordTransDXF();
    }//GEN-LAST:event_itemKoordTransDXFActionPerformed

    private void itemKoordTransFWKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemKoordTransFWKActionPerformed
        befehlAddinKoordTransFWK();
    }//GEN-LAST:event_itemKoordTransFWKActionPerformed

    private void itemLadenHintergrundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemLadenHintergrundActionPerformed
        befehlLadeHintergrund();
    }//GEN-LAST:event_itemLadenHintergrundActionPerformed

    private void knopfHintergrundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfHintergrundActionPerformed
        befehlZeigeHintergrund(knopfHintergrund.isSelected());
    }//GEN-LAST:event_knopfHintergrundActionPerformed

    private void itemHintergrundAnzeigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemHintergrundAnzeigenActionPerformed
        boolean status = itemHintergrundAnzeigen.isSelected();
        knopfHintergrund.setSelected(status);
        befehlZeigeHintergrund(status);
    }//GEN-LAST:event_itemHintergrundAnzeigenActionPerformed

    private void itemDruckenGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDruckenGraphActionPerformed
        befehlDruckenGraph();
    }//GEN-LAST:event_itemDruckenGraphActionPerformed

    private void itemFindeOrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFindeOrtActionPerformed
        befehlAddinFindeort();
    }//GEN-LAST:event_itemFindeOrtActionPerformed

    private void itemInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemInputActionPerformed
        String text = "examples: de, fr, en";
        clStringDialog dialog = new clStringDialog(this, text, "Language", 6, locale);
        if (dialog.getAntwort() == null) {return;} // Dialog wurde abgebrochen
        if (dialog.getAntwort().equals("")){
            locale = Locale.getDefault();
        }
        else locale = new Locale(dialog.getAntwort());
        übersetzen(locale);
    }//GEN-LAST:event_itemInputActionPerformed

    private void itemFrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFrActionPerformed
        locale = new Locale("fr");
        übersetzen(locale);
    }//GEN-LAST:event_itemFrActionPerformed

    private void itemEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEnActionPerformed
        locale = new Locale("en");
        übersetzen(locale);
    }//GEN-LAST:event_itemEnActionPerformed

    private void itemDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDeActionPerformed
        locale = new Locale("de");
        übersetzen(locale);
    }//GEN-LAST:event_itemDeActionPerformed

    private void itemSystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSystemActionPerformed
        locale = Locale.getDefault();
        übersetzen(locale);
    }//GEN-LAST:event_itemSystemActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        int taste = evt.getKeyCode();
        nachrichtTasteGedrückt(taste);
    }//GEN-LAST:event_formKeyPressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        nachrichtMausLosgelassen(evt);
    }//GEN-LAST:event_formMouseReleased

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        nachrichtMausGedrückt(evt);
    }//GEN-LAST:event_formMousePressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        nachrichtMausGeklickt(evt);
    }//GEN-LAST:event_formMouseClicked

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        nachrichtMausBewegt(evt);
    }//GEN-LAST:event_formMouseMoved

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        nachrichtMausGezogen(evt);
    }//GEN-LAST:event_formMouseDragged

    private void knopfEigenschaftenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfEigenschaftenActionPerformed
        befehlEigenschaften();
    }//GEN-LAST:event_knopfEigenschaftenActionPerformed

    private void knopfAllesZurücksetzenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfAllesZurücksetzenActionPerformed
        befehlAllesZurücksetzen();
    }//GEN-LAST:event_knopfAllesZurücksetzenActionPerformed

    private void knopfNeuerKnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfNeuerKnActionPerformed
        befehlErstelleNeuenKnotenMaus(knopfNeuerKn.isSelected());
    }//GEN-LAST:event_knopfNeuerKnActionPerformed

    private void knopfNeuerStabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfNeuerStabActionPerformed
        befehlErstelleNeuenStabMaus(knopfNeuerStab.isSelected());
    }//GEN-LAST:event_knopfNeuerStabActionPerformed

    private void knopfZoomMausActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfZoomMausActionPerformed
        befehlZoomMaus(knopfZoomMaus.isSelected());
    }//GEN-LAST:event_knopfZoomMausActionPerformed

    private void itemKraftAnzeigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemKraftAnzeigenActionPerformed
        boolean status = itemKraftAnzeigen.isSelected();
        knopfKraft.setSelected(status);
        befehlZeigeStabkräfte(status);
    }//GEN-LAST:event_itemKraftAnzeigenActionPerformed

    private void itemLastenAnzeigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemLastenAnzeigenActionPerformed
        boolean status = itemLastenAnzeigen.isSelected();
        knopfLast.setSelected(status);
        befehlZeigeLasten(status);
    }//GEN-LAST:event_itemLastenAnzeigenActionPerformed

    private void itemLagerKrAnzeigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemLagerKrAnzeigenActionPerformed
        boolean status = itemLagerKrAnzeigen.isSelected();
        knopfLagerKr.setSelected(status);
        befehlZeigeAuflagerkräfte(status);
    }//GEN-LAST:event_itemLagerKrAnzeigenActionPerformed

    private void itemStabNrAnzeigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemStabNrAnzeigenActionPerformed
        boolean status = itemStabNrAnzeigen.isSelected();
        knopfStNr.setSelected(status);
        befehlZeigeStabNr(status);
    }//GEN-LAST:event_itemStabNrAnzeigenActionPerformed

    private void itemKnotenNrAnzeigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemKnotenNrAnzeigenActionPerformed
        boolean status = itemKnotenNrAnzeigen.isSelected();
        knopfKnNr.setSelected(status);
        befehlZeigeKnNr(status);
    }//GEN-LAST:event_itemKnotenNrAnzeigenActionPerformed

    private void knopfZurücksetzenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfZurücksetzenActionPerformed
        befehlZurücksetzen();
    }//GEN-LAST:event_knopfZurücksetzenActionPerformed

    private void knopfLöschenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfLöschenActionPerformed
        befehlLöschen();
    }//GEN-LAST:event_knopfLöschenActionPerformed

    private void knopfZoomAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfZoomAllActionPerformed
        befehlZoomAll();
    }//GEN-LAST:event_knopfZoomAllActionPerformed

    private void itemLöschenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemLöschenActionPerformed
        befehlLöschen();
    }//GEN-LAST:event_itemLöschenActionPerformed

    private void itemZurücksetzenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZurücksetzenActionPerformed
        befehlZurücksetzen();
    }//GEN-LAST:event_itemZurücksetzenActionPerformed

    private void itemBspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemBspActionPerformed
        befehlBspdaten();
    }//GEN-LAST:event_itemBspActionPerformed

    private void knopfLagerKrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfLagerKrActionPerformed
        befehlZeigeAuflagerkräfte(knopfLagerKr.isSelected());
    }//GEN-LAST:event_knopfLagerKrActionPerformed

    private void knopfLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfLastActionPerformed
        befehlZeigeLasten(knopfLast.isSelected());
    }//GEN-LAST:event_knopfLastActionPerformed

    private void knopfKraftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfKraftActionPerformed
        befehlZeigeStabkräfte(knopfKraft.isSelected());
    }//GEN-LAST:event_knopfKraftActionPerformed

    private void knopfStNrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfStNrActionPerformed
        befehlZeigeStabNr(knopfStNr.isSelected());
    }//GEN-LAST:event_knopfStNrActionPerformed

    private void knopfKnNrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfKnNrActionPerformed
        befehlZeigeKnNr(knopfKnNr.isSelected());
    }//GEN-LAST:event_knopfKnNrActionPerformed

    private void knopfKnotenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfKnotenActionPerformed
        befehlGewähltIstKnoten(knopfKnoten.isSelected());
    }//GEN-LAST:event_knopfKnotenActionPerformed

    private void knopfStabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfStabActionPerformed
        befehlGewähltIstStab(knopfStab.isSelected());
    }//GEN-LAST:event_knopfStabActionPerformed

    private void knopfBerechnenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfBerechnenActionPerformed
        befehlBerechne();
    }//GEN-LAST:event_knopfBerechnenActionPerformed

    private void itemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAboutActionPerformed
        befehlInfo();
    }//GEN-LAST:event_itemAboutActionPerformed

    private void itemHilfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemHilfeActionPerformed
        befehlHilfe();
    }//GEN-LAST:event_itemHilfeActionPerformed

    private void buttonGLSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGLSActionPerformed
        befehlOptionGLS(buttonGLS.isSelected());
    }//GEN-LAST:event_buttonGLSActionPerformed

    private void itemBerechnenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemBerechnenActionPerformed
        befehlBerechne();
    }//GEN-LAST:event_itemBerechnenActionPerformed

    private void itemEigenschaftenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEigenschaftenActionPerformed
        befehlEigenschaften();
    }//GEN-LAST:event_itemEigenschaftenActionPerformed

    private void itemAllesZurücksetzenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAllesZurücksetzenActionPerformed
        befehlAllesZurücksetzen();
    }//GEN-LAST:event_itemAllesZurücksetzenActionPerformed

    private void itemNeuerStabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNeuerStabActionPerformed
        befehlErstelleNeuenStab();
    }//GEN-LAST:event_itemNeuerStabActionPerformed

    private void itemNeuerPktActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNeuerPktActionPerformed
        befehlErstelleNeuenKnoten();
    }//GEN-LAST:event_itemNeuerPktActionPerformed

    private void itemStabselektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemStabselektActionPerformed
        befehlSelektiereStabNr();
    }//GEN-LAST:event_itemStabselektActionPerformed

    private void itemPktselektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPktselektActionPerformed
        befehlSelektiereKnotenNr();
    }//GEN-LAST:event_itemPktselektActionPerformed

    private void itemZoomxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZoomxyActionPerformed
        befehlZoomxy();
    }//GEN-LAST:event_itemZoomxyActionPerformed

    private void itemZoomAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZoomAllActionPerformed
        befehlZoomAll();
    }//GEN-LAST:event_itemZoomAllActionPerformed

    private void itemNeuzeichnenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNeuzeichnenActionPerformed
        befehlNeuZeichnen();
    }//GEN-LAST:event_itemNeuzeichnenActionPerformed

    private void itemNeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNeuActionPerformed
        befehlNeu();
    }//GEN-LAST:event_itemNeuActionPerformed

    private void itemLadenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemLadenActionPerformed
        befehlLaden(false);
    }//GEN-LAST:event_itemLadenActionPerformed

    private void itemDruckenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDruckenActionPerformed
        befehlDrucken();
    }//GEN-LAST:event_itemDruckenActionPerformed

    private void itemSpeichernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSpeichernActionPerformed
        befehlSpeichern();
    }//GEN-LAST:event_itemSpeichernActionPerformed

    private void itemBeendenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemBeendenActionPerformed
        befehlBeenden();
    }//GEN-LAST:event_itemBeendenActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        befehlBeenden();       
    }//GEN-LAST:event_exitForm
    
    private void tastenbelegen() {                
        javax.swing.ActionMap am = getRootPane().getActionMap();
        javax.swing.InputMap im = getRootPane().getInputMap(javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        
        // ESC - Taste
        javax.swing.KeyStroke EscapeStroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0);
        Object EscapeObjekt = new Object();
        javax.swing.Action EscapeAction = new javax.swing.AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nachrichtTasteGedrückt(java.awt.event.KeyEvent.VK_ESCAPE);
            }
        };
        im.put(EscapeStroke, EscapeObjekt);
        am.put(EscapeObjekt, EscapeAction);
        
        // F1 - Taste
        javax.swing.KeyStroke F1Stroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0);
        itemHilfe.setAccelerator(F1Stroke);
                
        // F2 - Taste        
        javax.swing.KeyStroke F2Stroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0);
        itemNeuzeichnen.setAccelerator(F2Stroke);
                
        // F3 - Taste
        javax.swing.KeyStroke F3Stroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0);
        itemZoomAll.setAccelerator(F3Stroke);
                
        // F4 - Taste
        javax.swing.KeyStroke F4Stroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0);
        Object F4Objekt = new Object();
        javax.swing.Action F4Action = new javax.swing.AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nachrichtTasteGedrückt(java.awt.event.KeyEvent.VK_F4);
            }
        };
        im.put(F4Stroke, F4Objekt);
        am.put(F4Objekt, F4Action);
                
        // F5 - Taste
        javax.swing.KeyStroke F5Stroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0);
        itemNeuerPkt.setAccelerator(F5Stroke);
                
        // F6 - Taste
        javax.swing.KeyStroke F6Stroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0);
        Object F6Objekt = new Object();
        javax.swing.Action F6Action = new javax.swing.AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nachrichtTasteGedrückt(java.awt.event.KeyEvent.VK_F6);
            }
        };
        im.put(F6Stroke, F6Objekt);
        am.put(F6Objekt, F6Action);        
        
        // F7 - Taste
        javax.swing.KeyStroke F7Stroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0);
        Object F7Objekt = new Object();
        javax.swing.Action F7Action = new javax.swing.AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nachrichtTasteGedrückt(java.awt.event.KeyEvent.VK_F7);
            }
        };
        im.put(F7Stroke, F7Objekt);
        am.put(F7Objekt, F7Action);  
                
        // F9 - Taste
        javax.swing.KeyStroke F9Stroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0);
        itemBerechnen.setAccelerator(F9Stroke);   
        
        // F11 - Taste
        javax.swing.KeyStroke F11Stroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0);
        Object F11Objekt = new Object();
        javax.swing.Action F11Action = new javax.swing.AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nachrichtTasteGedrückt(java.awt.event.KeyEvent.VK_F11);
            }
        };
        im.put(F11Stroke, F11Objekt);
        am.put(F11Objekt, F11Action);     
        
        // F12 - Taste
        javax.swing.KeyStroke F12Stroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0);
        Object F12Objekt = new Object();
        javax.swing.Action F12Action = new javax.swing.AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nachrichtTasteGedrückt(java.awt.event.KeyEvent.VK_F12);
            }
        };
        im.put(F12Stroke, F12Objekt);
        am.put(F12Objekt, F12Action);
                
        // Minus - Tasten
        javax.swing.KeyStroke MinusStroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, 0);
        Object MinusObjekt = new Object();
        javax.swing.Action MinusAction = new javax.swing.AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nachrichtTasteGedrückt(java.awt.event.KeyEvent.VK_MINUS);
            }
        };
        im.put(MinusStroke, MinusObjekt);
        am.put(MinusObjekt, MinusAction);
        
        javax.swing.KeyStroke MinusNumStroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SUBTRACT, 0);
        Object MinusNumObjekt = new Object();
        javax.swing.Action MinusNumAction = new javax.swing.AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nachrichtTasteGedrückt(java.awt.event.KeyEvent.VK_SUBTRACT);
            }
        };
        im.put(MinusNumStroke, MinusNumObjekt);
        am.put(MinusNumObjekt, MinusNumAction);
        
        // Plus - Tasten
        javax.swing.KeyStroke PlusStroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PLUS, 0);
        Object PlusObjekt = new Object();
        javax.swing.Action PlusAction = new javax.swing.AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nachrichtTasteGedrückt(java.awt.event.KeyEvent.VK_PLUS);
            }
        };
        im.put(PlusStroke, PlusObjekt);
        am.put(PlusObjekt, PlusAction);
        
        javax.swing.KeyStroke PlusNumStroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, 0);
        Object PlusNumObjekt = new Object();
        javax.swing.Action PlusNumAction = new javax.swing.AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nachrichtTasteGedrückt(java.awt.event.KeyEvent.VK_ADD);
            }
        };
        im.put(PlusNumStroke, PlusNumObjekt);
        am.put(PlusNumObjekt, PlusNumAction);
                
        // DEL - Taste
        javax.swing.KeyStroke DELStroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0);        
        itemLöschen.setAccelerator(DELStroke);
        
        // BACKSPACE - Taste
        javax.swing.KeyStroke BackStroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, 0);
        itemZurücksetzen.setAccelerator(BackStroke);
        
        // Ctrl-S - Tastenkombination
        javax.swing.KeyStroke CtrlSStroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK);
        itemSpeichern.setAccelerator(CtrlSStroke);
        
        // Ctrl-P - Tastenkombination
        javax.swing.KeyStroke CtrlPStroke = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK);
        itemDruckenGraph.setAccelerator(CtrlPStroke);
                
    }
    
    private void übersetzen(Locale p_locale) {
        menuRB = ResourceBundle.getBundle("Fachwerk3D/locales3D/gui3D-menu", locale);
        if (menuRB == null) {
            System.err.println("gui-menu für " + locale.toString());
            return;
        }
                
        menuProg.setText(tr("menuProgramm"));
        itemSpeichern.setText(tr("itemSpeichern"));
        itemDrucken.setText(tr("itemDrucken"));
        itemDrucken.setToolTipText(tr("ttipDrucken"));
        itemDruckenGraph.setText(tr("itemDruckenGraph"));
        itemDruckenGraph.setToolTipText(tr("ttipDruckenGraph"));
        itemLaden.setText(tr("itemLaden"));
        itemLadenHintergrund.setText(tr("itemLadenHintergrund"));
        submenuSprache.setText(tr("itemSprache"));
        itemNeu.setText(tr("itemNeu"));
        itemBeenden.setText(tr("itemBeenden"));
        
        menuAnsicht.setText(tr("menuAnsicht"));
        itemNeuzeichnen.setText(tr("itemNeuzeichnen"));
        itemZoomAll.setText(tr("itemZoomAll"));
        itemZoomxy.setText(tr("itemZoomxy"));
        itemBlickrtg.setText(tr("itemBlickrtg"));
        itemHintergrundAnzeigen.setText(tr("itemHintergrundAnzeigen"));
        itemKnotenNrAnzeigen.setText(tr("itemKnNrAnz"));
        itemStabNrAnzeigen.setText(tr("itemStNrAnz"));
        itemKraftAnzeigen.setText(tr("itemStabkraft"));
        itemLastenAnzeigen.setText(tr("itemLasten"));
        itemLagerKrAnzeigen.setText(tr("itemAuflager"));
        
        menuFachwerk.setText(tr("menuFachwerk"));
        itemPktselekt.setText(tr("itemSelKn"));
        itemStabselekt.setText(tr("itemSelSt"));
        itemNeuerPkt.setText(tr("itemNeuerKn"));
        itemNeuerStab.setText(tr("itemNeuerSt"));
        itemLöschen.setText(tr("itemLoeschen"));
        itemLöschen.setToolTipText(tr("ttipLoeschen"));
        itemAllesZurücksetzen.setText(tr("itemAllesZurueck"));
        itemAllesZurücksetzen.setToolTipText(tr("ttipAllesZurueck"));
        itemEigenschaften.setText(tr("itemEigenschaft"));
        itemEigenschaften.setToolTipText(tr("ttipEigenschaft"));
        
        menuRechnen.setText(tr("menuRechnen"));
        itemBerechnen.setText(tr("itemBerechnen"));
        itemZurücksetzen.setText(tr("itemZurueck"));
        itemZurücksetzen.setToolTipText(tr("ttipZurueck"));
        buttonVerbose.setText(tr("itemVerbose"));
        buttonVerbose.setToolTipText(tr("ttipVerbose"));
        buttonGLS.setText(tr("itemGLS"));
        buttonGLS.setToolTipText(tr("ttipGLS"));
        buttonMechanismus.setText(tr("itemMechanismus"));
        buttonMechanismus.setToolTipText(tr("ttipMechanismus"));
        
        menuAddins.setText(tr("menuAddins"));
        itemKoordTransFWK.setText(tr("itemKoordTransFWK"));
        itemKoordTransFWK.setToolTipText(tr("ttipKoordTransFWK"));
        itemKoordTransDXF.setText(tr("itemKoordTransDXF"));
        itemKoordTransDXF.setToolTipText(tr("ttipKoordTransDXF"));
        itemSkaliereLasten.setText(tr("itemLastenSkalieren"));
        itemSkaliereLasten.setToolTipText(tr("ttipLastenSkalieren"));
        itemExportInput.setText(tr("itemExportInput"));
        itemExportInput.setToolTipText(tr("ttipExportInput"));
        itemFindeOrt.setText(tr("itemFindeOrt"));
        itemFindeOrt.setToolTipText(tr("ttipFindeOrt"));
        
        menuHilfe.setText(tr("menuHilfe"));
        itemHilfe.setText(tr("itemHilfe"));
        itemAbout.setText(tr("itemInfo"));
        itemBsp.setText(tr("itemBsp"));
        
        
        knopfBerechnen.setToolTipText(tr("knttipBerechnen"));
        knopfZurücksetzen.setToolTipText(tr("knttipZurueck"));
        knopfKnoten.setToolTipText(tr("knttipSelKnoten"));
        knopfStab.setToolTipText(tr("knttipSelStab"));
        
        knopfHintergrund.setToolTipText(tr("layerttipHintergrund"));
        knopfKnNr.setToolTipText(tr("layerttipKnoten"));
        knopfStNr.setToolTipText(tr("layerttipStab"));
        knopfKraft.setToolTipText(tr("layerttipKraft"));
        knopfLast.setToolTipText(tr("layerttipLast"));
        knopfLagerKr.setToolTipText(tr("layerttipLager"));
        
        knopfZoomAll.setToolTipText(tr("knttipZoomAll"));
        knopfZoomOut.setToolTipText(tr("knttipZoomOut"));
        knopfZoomMaus .setToolTipText(tr("knttipZoom"));
        knopfNeuerKn.setText(tr("knNeuerKn"));
        knopfNeuerKn.setToolTipText(tr("knttipNeuerKn"));
        knopfNeuerKnSnap.setText(tr("knNeuerKnSnap"));
        knopfNeuerKnSnap.setToolTipText(tr("knttipNeuerKnSnap"));
        knopfNeuerStab.setText(tr("knNeuerStab"));
        knopfNeuerStab.setToolTipText(tr("knttipNeuerStab"));
        knopfLöschen.setToolTipText(tr("knttipLoeschen"));
        knopfAllesZurücksetzen.setToolTipText(tr("knttipAllesZurueck"));
        knopfEigenschaften.setToolTipText(tr("knttipEigenschaft"));
            
        this.setTitle("Fachwerk3D - " +tr("programmtitel"));
        befehlSpracheGewechselt();
        pack();
    }
    
    private String tr(String key) {        
        String übersetzt;
        try {übersetzt = menuRB.getString(key);}
        catch (MissingResourceException e) {
            System.err.println("Schluesselwort + " + key + " nicht gefunden fuer " + locale.toString() + " ; " + e.toString());
            return key;
        }        
        return übersetzt;
    }
    
    public Locale getLc(){
        return locale;
    }
    
    public void setLc(Locale lc) {
        locale = lc;
        übersetzen(locale);
    }
        
    protected abstract void befehlSpeichern();
    protected abstract void befehlDrucken();
    protected abstract void befehlDruckenGraph();
    protected abstract void befehlLaden(boolean progstart);
    protected abstract void befehlLadeHintergrund();
    protected abstract void befehlNeu();
    protected abstract void befehlSpracheGewechselt();
    protected abstract void befehlBeenden();
    
    protected abstract void befehlNeuZeichnen();
    protected abstract void befehlZoomAll();
    protected abstract void befehlZoomxy();
    protected abstract void befehlBlickrtg();
    protected abstract void befehlZeigeHintergrund(boolean status);
    protected abstract void befehlZeigeKnNr(boolean status);
    protected abstract void befehlZeigeStabNr(boolean status);
    protected abstract void befehlZeigeStabkräfte(boolean status);
    protected abstract void befehlZeigeLasten(boolean status);
    protected abstract void befehlZeigeAuflagerkräfte(boolean status);   
    
    protected abstract void befehlSelektiereKnotenNr();
    protected abstract void befehlSelektiereStabNr();    
    protected abstract void befehlErstelleNeuenKnoten();
    protected abstract void befehlErstelleNeuenStab();
    protected abstract void befehlLöschen();
    protected abstract void befehlAllesZurücksetzen();
    protected abstract void befehlEigenschaften();
    
    protected abstract void befehlBerechne();
    protected abstract void befehlZurücksetzen();
    protected abstract void befehlOptionVerbose(boolean verbose);
    protected abstract void befehlOptionVorberechnung(boolean status);
    protected abstract void befehlOptionGLS(boolean status);
    protected abstract void befehlOptionMechanismus(boolean status);
    
    protected abstract void befehlAddinKoordTransFWK();
    protected abstract void befehlAddinKoordTransDXF();
    protected abstract void befehlAddinExportInput();
    protected abstract void befehlAddinFindeort();
    protected abstract void befehlAddinSkaliereLasten();
    
    protected abstract void befehlBspdaten();
    protected abstract void befehlHilfe();
    protected abstract void befehlInfo();
    
    protected abstract void befehlGewähltIstStab(boolean status);
    protected abstract void befehlGewähltIstKnoten(boolean status); 
        
    protected abstract void befehlErstelleNeuenKnotenMaus(boolean status);
    protected abstract void befehlErstelleNeuenStabMaus(boolean status);    
    protected abstract void befehlErstelleNeuenKnotenSnap(boolean status);
    protected abstract void befehlZoomMaus(boolean status);
    protected abstract void befehlZoomOut();
    protected abstract void befehlBlickrtgMaus(double winkelHor, double winkelVer);
    
    protected abstract void nachrichtMausGeklickt(java.awt.event.MouseEvent evt);
    protected abstract void nachrichtMausBewegt(java.awt.event.MouseEvent evt);
    protected abstract void nachrichtMausGezogen(java.awt.event.MouseEvent evt);
    protected abstract void nachrichtMausGedrückt(java.awt.event.MouseEvent evt);
    protected abstract void nachrichtMausLosgelassen(java.awt.event.MouseEvent evt);
    protected abstract void nachrichtMausRadGedreht(java.awt.event.MouseWheelEvent evt);
    
    protected abstract void nachrichtTasteGedrückt(int taste);
    
    
    protected boolean KnopfStabistgedrückt() {
        return knopfStab.isSelected();
    }  
    
    protected boolean KnopfKnotenistgedrückt() {
        return knopfKnoten.isSelected();
    }
    
    /*
    protected boolean KnopfNeuerKnotenistgedrückt() {
        return knopfNeuerKn.isSelected();
    }
    
    protected boolean KnopfNeuerStabistgedrückt() {
        return knopfNeuerStab.isSelected();
    }
    
    protected boolean KnopfZoomMausistgedrückt() {
        return knopfZoomMaus.isSelected();
    }
    
    protected boolean KnopfSchiebeKnistgedrückt(){
        return knopfSchiebeKn.isSelected();
    }
    */
    
    protected void setKnopfStab(boolean gedrückt) {
        knopfStab.setSelected(gedrückt);
    }    
    
    protected void setKnopfKnoten(boolean gedrückt) {
        knopfKnoten.setSelected(gedrückt);
    }
    
    protected void setKnopfZoomMaus(boolean gedrückt) {
        knopfZoomMaus.setSelected(gedrückt);
    }
    
    protected void setKnopfNeuerKnoten(boolean gedrückt) {
        knopfNeuerKn.setSelected(gedrückt);
    }
    
    protected void setKnopfNeuerKnotenSnap(boolean gedrückt) {
        knopfNeuerKnSnap.setSelected(gedrückt);
    }
    
    protected void setKnopfNeuerStab(boolean gedrückt) {
        knopfNeuerStab.setSelected(gedrückt);
    }
    
    /* TODO Anm: knopfSchiebeKn existiert z.Z. nicht.
    protected void setKnopfSchiebeKn(boolean gedrückt) {
        knopfSchiebeKn.setSelected(gedrückt);
    }
    */
    
    
    
    
    
    
    protected void setLayerKnNr(boolean status) {
        knopfKnNr.setSelected(status);
        itemKnotenNrAnzeigen.setSelected(status);
    }
    
    protected void setLayerStNr(boolean status) {
        knopfStNr.setSelected(status);
        itemStabNrAnzeigen.setSelected(status);
    }
    
    protected void setLayerStKraft(boolean status) {
        knopfKraft.setSelected(status);
        itemKraftAnzeigen.setSelected(status);
    }
    
    protected void setLayerLasten(boolean status) {
        knopfLast.setSelected(status);
        itemLastenAnzeigen.setSelected(status);
    }
    
    protected void setLayerAuflKraft(boolean status) {
        knopfLagerKr.setSelected(status);
        itemLagerKrAnzeigen.setSelected(status);
    }
    protected void setLayerHintergrund(boolean status) {
        knopfHintergrund.setSelected(status);
        itemHintergrundAnzeigen.setSelected(status);
    }
    
    protected boolean LayerHintergrund() {
        return knopfHintergrund.isSelected();
    }
    protected boolean LayerKnNr() {
        return knopfKnNr.isSelected();
    }    
    protected boolean LayerStNr() {
        return knopfStNr.isSelected();
    }
        
    protected boolean LayerStKraft() {
        return knopfKraft.isSelected();
    }
        
    protected boolean LayerLasten() {
        return knopfLast.isSelected();
    }
    protected boolean LayerAuflKraft() {
        return knopfLagerKr.isSelected();
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LayerPanel;
    private javax.swing.JPanel StatusFwPanel;
    private javax.swing.JPanel StatusLeistePanel;
    private javax.swing.JPanel StatusTextPanel;
    private javax.swing.JPanel WerkzeugPanel;
    private javax.swing.JCheckBoxMenuItem buttonGLS;
    private javax.swing.JCheckBoxMenuItem buttonMechanismus;
    private javax.swing.JCheckBoxMenuItem buttonVerbose;
    protected javax.swing.JTextField feldStatusFw;
    protected javax.swing.JTextField feldStatuszeile;
    protected javax.swing.JTextField feldX;
    protected javax.swing.JTextField feldZ;
    private javax.swing.JMenuItem itemAbout;
    private javax.swing.JMenuItem itemAllesZurücksetzen;
    private javax.swing.JMenuItem itemBeenden;
    private javax.swing.JMenuItem itemBerechnen;
    private javax.swing.JMenuItem itemBlickrtg;
    private javax.swing.JMenuItem itemBsp;
    private javax.swing.JMenuItem itemDe;
    private javax.swing.JMenuItem itemDrucken;
    private javax.swing.JMenuItem itemDruckenGraph;
    private javax.swing.JMenuItem itemEigenschaften;
    private javax.swing.JMenuItem itemEn;
    private javax.swing.JMenuItem itemExportInput;
    private javax.swing.JMenuItem itemFindeOrt;
    private javax.swing.JMenuItem itemFr;
    private javax.swing.JMenuItem itemHilfe;
    private javax.swing.JCheckBoxMenuItem itemHintergrundAnzeigen;
    private javax.swing.JMenuItem itemInput;
    private javax.swing.JCheckBoxMenuItem itemKnotenNrAnzeigen;
    private javax.swing.JMenuItem itemKoordTransDXF;
    private javax.swing.JMenuItem itemKoordTransFWK;
    private javax.swing.JCheckBoxMenuItem itemKraftAnzeigen;
    private javax.swing.JMenuItem itemLaden;
    private javax.swing.JMenuItem itemLadenHintergrund;
    private javax.swing.JCheckBoxMenuItem itemLagerKrAnzeigen;
    private javax.swing.JCheckBoxMenuItem itemLastenAnzeigen;
    private javax.swing.JMenuItem itemLöschen;
    private javax.swing.JMenuItem itemNeu;
    private javax.swing.JMenuItem itemNeuerPkt;
    private javax.swing.JMenuItem itemNeuerStab;
    private javax.swing.JMenuItem itemNeuzeichnen;
    private javax.swing.JMenuItem itemPktselekt;
    private javax.swing.JMenuItem itemSkaliereLasten;
    private javax.swing.JMenuItem itemSpeichern;
    private javax.swing.JCheckBoxMenuItem itemStabNrAnzeigen;
    private javax.swing.JMenuItem itemStabselekt;
    private javax.swing.JMenuItem itemSystem;
    private javax.swing.JMenuItem itemZoomAll;
    private javax.swing.JMenuItem itemZoomxy;
    private javax.swing.JMenuItem itemZurücksetzen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JButton knopfAllesZurücksetzen;
    private javax.swing.JButton knopfBerechnen;
    private javax.swing.JButton knopfEigenschaften;
    private javax.swing.JToggleButton knopfHintergrund;
    private javax.swing.JToggleButton knopfKnNr;
    private javax.swing.JToggleButton knopfKnoten;
    private javax.swing.JToggleButton knopfKraft;
    private javax.swing.JToggleButton knopfLagerKr;
    private javax.swing.JToggleButton knopfLast;
    private javax.swing.JButton knopfLöschen;
    private javax.swing.JToggleButton knopfNeuerKn;
    private javax.swing.JToggleButton knopfNeuerKnSnap;
    private javax.swing.JToggleButton knopfNeuerStab;
    private javax.swing.JToggleButton knopfStNr;
    private javax.swing.JToggleButton knopfStab;
    private javax.swing.JButton knopfZoomAll;
    private javax.swing.JToggleButton knopfZoomMaus;
    private javax.swing.JButton knopfZoomOut;
    private javax.swing.JButton knopfZurücksetzen;
    private javax.swing.JMenu menuAddins;
    private javax.swing.JMenu menuAnsicht;
    private javax.swing.JMenu menuFachwerk;
    private javax.swing.JMenu menuHilfe;
    private javax.swing.JMenu menuProg;
    private javax.swing.JMenu menuRechnen;
    protected javax.swing.JSlider sliderHorizontal;
    protected javax.swing.JSlider sliderVertical;
    private javax.swing.JMenu submenuSprache;
    private javax.swing.JPanel weiteresWerkzeugPanel;
    // End of variables declaration//GEN-END:variables
    
}
