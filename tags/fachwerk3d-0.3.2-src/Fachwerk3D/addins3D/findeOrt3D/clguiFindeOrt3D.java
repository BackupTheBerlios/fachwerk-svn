/*
 * clKnotenDialog.java
 *
 * Created on 10. September 2003, 18:57
 */

package Fachwerk3D.addins3D.findeOrt3D;

import Fachwerk3D.statik3D.clKnoten3D;
import Fachwerk.statik.clStab;
import Fachwerk3D.gui3D.clWissenderStab3D;
import Fachwerk3D.statik3D.inKonstante3D;
import Fachwerk3D.addins3D.findeOrt3D.clFindeOrt3D;
import Fachwerk.statik.Fkt;
import java.util.*;

/**
 * Fachwerk - treillis
 *
 * Copyright (c) 2003 - 2007 A.Vontobel <qwert2003@users.sourceforge.net>
 *                                      <qwert2003@users.berlios.de>
 *
 * Das Programm enthält bestimmt noch FEHLER. Sämtliche Resultate sind
 * SORGFÄLTIG auf ihre PLAUSIBILITäT zu prüfen!
 *
 * Dieses einfache Fachwerkprogramm verwendet ausschliesslich die
 * Gleichgewichtsbedingungen zur Bestimmung der Stabkräfte.
 * Bei statisch unbestimmten Systemen können die überzähligen Stabkräfte
 * zugewiesen werden.
 * Das Programm bezweckt, die Anwendung des unteren (statischen)
 * Grenzwertsatzes der Plastizitätstheorie zu erleichtern.
 *
 * -------------------------------------------------------------
 *
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen
 * der GNU General Public License, Version 2, wie von der Free Software
 * Foundation herausgegeben, weitergeben und/oder modifizieren.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, dass es
 * Ihnen von Nutzen sein wird, aber OHNE JEDE GEWÄHRLEISTUNG - sogar ohne
 * die implizite Gewährleistung der MARKTREIFE oder der EIGNUNG FüR EINEN
 * BESTIMMTEN ZWECK.  Details finden Sie in der GNU General Public License.
 *
 * Sie sollten eine Kopie der GNU General Public License zusammen  mit
 * diesem Programm erhalten haben. Falls nicht, schreiben Sie an die
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
 */
public class clguiFindeOrt3D extends javax.swing.JDialog implements inKonstante3D {
    
    private int nr, stabnr;
    private clKnoten3D kn;
    private clStab stab;
    private LinkedList Knotenliste;
    private LinkedList Stabliste;
    ResourceBundle addinsRB;
    clKnoten3D[] Knotenarray;
    clStab[] Stabarray;
    int[][] Topologie;
    Locale locale;
    Fachwerk3D.treillis3D parentfw;
    
    private String meldung = "";
    
    private double[] ursprKoord = new double[3];
    
    private boolean GEÄNDERT = false;
    private String dxstr, dystr, dzstr, xstr, ystr, zstr, Fstr, nrstr;
    private double dx, dy, dz, x, y, z, F;
    private double[] vektor = new double[3];
    
    /** Creates new form clKnotenDialog */
    public clguiFindeOrt3D(int p_nr, LinkedList knliste, LinkedList stliste, 
                           Fachwerk3D.treillis3D parent, Locale lc) {
        super(parent, "Knotenposition suchen", true);
        nr = p_nr;
        Knotenliste = knliste;
        Stabliste = stliste;
        kn = (clKnoten3D) Knotenliste.get(p_nr-1);
        
        // übersetzen
        locale = lc;
        addinsRB = ResourceBundle.getBundle("Fachwerk/locales/gui-addins", locale);
        if (addinsRB == null) {
            System.err.println("FEHLER: gui-addins für " + locale.toString());
        }
        
        // Ausgangskoordinaten merken
        ursprKoord[0] = kn.getX();
        ursprKoord[1] = kn.getY();
        ursprKoord[2] = kn.getZ();
        parentfw = parent;
        
        // Knoteninfos einleisen
        // Knoten-Nr
        nrstr = Integer.toString(nr);
        // bisherige Koord
        xstr = Double.toString(kn.getX());
        ystr = Double.toString(kn.getY());
        zstr = Double.toString(kn.getZ());
        
        // Falls der Knoten belastet ist: Lastrichtung vorschlagen
        if (kn.getLx() != 0 || kn.getLy() != 0 || kn.getLz() != 0) {
            double L[] = new double[3];
            L[0] = Math.abs(kn.getLx());
            L[1] = Math.abs(kn.getLy());
            L[2] = Math.abs(kn.getLz());
            double normierung = Fkt.max(L);
            dxstr = Double.toString(kn.getLx() / normierung);
            dystr = Double.toString(kn.getLy() / normierung);
            dzstr = Double.toString(kn.getLz() / normierung);
        }
        
        
        initComponents();
        felddx.setText(dxstr); felddy.setText(dystr); felddz.setText(dzstr);
        übersetzen();
        pack(); 
        zentriere(parent);
        show();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        feldStabnr = new javax.swing.JTextField();
        feldN = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        feldX = new javax.swing.JTextField();
        feldZ = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        felddx = new javax.swing.JTextField();
        felddz = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        feldY = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        felddy = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbNr = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        knopfBerechnen = new javax.swing.JButton();
        knopfNichtstun = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setText("Vektor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel4.setText("dx");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel5.setText("=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 3);
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel7.setText("dz");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        jLabel8.setText("=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 5, 3);
        jPanel1.add(jLabel8, gridBagConstraints);

        jLabel9.setText("bisherige Koordinaten  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        jLabel11.setText("z");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(jLabel11, gridBagConstraints);

        jLabel12.setText("Stab Nr.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel12, gridBagConstraints);

        jLabel13.setText("angestrebte Stabkraft");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jLabel13, gridBagConstraints);

        jLabel14.setText("N");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel1.add(jLabel14, gridBagConstraints);

        jLabel16.setText("x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel16, gridBagConstraints);

        feldStabnr.setColumns(4);
        feldStabnr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                feldStabnrFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(feldStabnr, gridBagConstraints);

        feldN.setColumns(5);
        feldN.setText("0");
        feldN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                feldNFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel1.add(feldN, gridBagConstraints);

        jLabel20.setText("=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 10, 3);
        jPanel1.add(jLabel20, gridBagConstraints);

        jLabel22.setText("kN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        jPanel1.add(jLabel22, gridBagConstraints);

        feldX.setBackground(new java.awt.Color(204, 255, 255));
        feldX.setColumns(6);
        feldX.setEditable(false);
        feldX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        feldX.setText(xstr);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(feldX, gridBagConstraints);

        feldZ.setBackground(new java.awt.Color(205, 255, 255));
        feldZ.setColumns(6);
        feldZ.setEditable(false);
        feldZ.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        feldZ.setText(zstr);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(feldZ, gridBagConstraints);

        jLabel23.setText("=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 3);
        jPanel1.add(jLabel23, gridBagConstraints);

        jLabel24.setText("=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 5, 3);
        jPanel1.add(jLabel24, gridBagConstraints);

        felddx.setColumns(5);
        felddx.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                felddxFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(felddx, gridBagConstraints);

        felddz.setColumns(5);
        felddz.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                felddzFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(felddz, gridBagConstraints);

        jLabel15.setText("y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel15, gridBagConstraints);
        jLabel15.getAccessibleContext().setAccessibleName("y");

        jLabel10.setText("=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel1.add(jLabel10, gridBagConstraints);

        feldY.setBackground(new java.awt.Color(205, 255, 255));
        feldY.setColumns(6);
        feldY.setEditable(false);
        feldY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(feldY, gridBagConstraints);

        jLabel17.setText("dy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel17, gridBagConstraints);

        jLabel25.setText("=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel1.add(jLabel25, gridBagConstraints);

        felddy.setColumns(5);
        felddy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                felddyFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(felddy, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Knoten Nr");
        jPanel2.add(jLabel1);

        lbNr.setFont(new java.awt.Font("Dialog", 1, 14));
        lbNr.setText(nrstr);
        jPanel2.add(lbNr);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        knopfBerechnen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/button_ok.png")));
        knopfBerechnen.setText("berechnen");
        knopfBerechnen.setToolTipText("Iteration starten");
        knopfBerechnen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfBerechnenActionPerformed(evt);
            }
        });

        jPanel3.add(knopfBerechnen);

        knopfNichtstun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fachwerk/gui/icons/button_cancel.png")));
        knopfNichtstun.setText("NICHTS \u00c4NDERN !");
        knopfNichtstun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knopfNichtstunActionPerformed(evt);
            }
        });

        jPanel3.add(knopfNichtstun);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

    }// </editor-fold>//GEN-END:initComponents

    private void felddyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_felddyFocusGained
// TODO add your handling code here:
    }//GEN-LAST:event_felddyFocusGained

    private void knopfBerechnenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfBerechnenActionPerformed
        GEÄNDERT = true;
        setVisible(false);
        iterationStarten();
    }//GEN-LAST:event_knopfBerechnenActionPerformed

    private void felddzFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_felddzFocusGained
        felddz.setSelectionStart(0); felddz.setSelectionEnd(felddz.getText().length());
    }//GEN-LAST:event_felddzFocusGained

    private void felddxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_felddxFocusGained
        felddx.setSelectionStart(0); felddx.setSelectionEnd(felddx.getText().length());
    }//GEN-LAST:event_felddxFocusGained

    private void feldNFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_feldNFocusGained
        feldN.setSelectionStart(0); feldN.setSelectionEnd(feldN.getText().length());
    }//GEN-LAST:event_feldNFocusGained

    private void feldStabnrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_feldStabnrFocusGained
        feldStabnr.setSelectionStart(0); feldStabnr.setSelectionEnd(feldStabnr.getText().length());
    }//GEN-LAST:event_feldStabnrFocusGained

    private void knopfNichtstunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knopfNichtstunActionPerformed
        GEÄNDERT = false;
        setVisible(false);
    }//GEN-LAST:event_knopfNichtstunActionPerformed

    private void iterationStarten() {
        boolean keinFEHLER = true;
        keinFEHLER = einlesen();
        if (!keinFEHLER) {
            System.out.println(tr("Einlesefehler"));
            setVisible(true);
            return;
        }
        datenaufbereiten();
        
        clFindeOrt3D fo = new clFindeOrt3D(kn, vektor, stab, F,
                                           Knotenarray, Stabarray, Topologie,
                                           parentfw.OptionVorber, parentfw.OptionGLS);
        boolean allesOK = fo.start();
        
        if (allesOK) System.out.println(tr("ALLESOK"));
        else {
            System.out.println(tr("NICHTOK"));
            System.out.println(tr("wiederherstellen"));
            meldung = tr("NICHTOK") + ": " + tr("wiederherstellen");
            // Ausgangskoordinaten wieder herstellen
            kn.setNeueKoord(ursprKoord[0], ursprKoord[1], ursprKoord[2]);
            parentfw.zurücksetzen(false);
        }
    }
    
    
    private void datenaufbereiten() {
        //Datenaufbereiten
        Knotenarray = new clKnoten3D[Knotenliste.size() + 1];
        Stabarray = new clStab[Stabliste.size() + 1];
        Topologie = new int[Knotenarray.length][Knotenarray.length];
        
        int i = 1;
        for (Iterator it = Knotenliste.iterator(); it.hasNext();) {
            Knotenarray[i] = (clKnoten3D) it.next();            
            i++;
        }
        i = 1;
        for (Iterator it = Stabliste.iterator(); it.hasNext();) {
            clWissenderStab3D wst = (clWissenderStab3D) it.next();
            Stabarray[i] = wst.stab;
            Topologie[wst.von][wst.bis] = i;            
            i++;
        }
        clWissenderStab3D wst = (clWissenderStab3D) Stabliste.get(stabnr-1); // ÜBERPRÜFEN OB -1
        stab = wst.stab;
    }
       
    
    
    private void übersetzen() {
        this.setTitle(tr("titel-FindeOrt"));
        
        knopfBerechnen.setText(tr("berechnen"));
        knopfBerechnen.setToolTipText(tr("ttipberechnen"));
        knopfNichtstun.setText(tr("nichtsaendern"));
        jLabel1.setText(tr("KnotenNr"));
        jLabel2.setText(tr("Vektor"));
        jLabel2.setToolTipText(tr("ttipvektor"));
        jLabel9.setText(tr("bishKoordinaten"));
        jLabel12.setText(tr("StabNr"));
        jLabel13.setText(tr("KraftN"));
        jLabel4.setText('\u0394'+"x");
        jLabel17.setText('\u0394'+"y");
        jLabel7.setText('\u0394'+"z");
        
    }
    
    public boolean hatGeändert() {
        if (GEÄNDERT) return true;
        else return false;
    }
    
    /**
     * Liest neue Knotendaten ein. Liefert true, wenn erfolgreich
     */
    public boolean einlesen() {
        try {
            dx = Fkt.holZahl(felddx.getText());
            dy = Fkt.holZahl(felddy.getText());
            dz = Fkt.holZahl(felddz.getText());
            stabnr = Integer.parseInt(feldStabnr.getText());
            F = Fkt.holZahl(feldN.getText());
                                           
        }
        catch (IllegalArgumentException e) {
            System.out.println(e.toString());
            return false;
        }
        if (stabnr <= 0 || stabnr > Stabliste.size()) {
            System.out.println(tr("Stabexistiertnicht"));
            return false;
        }
        
        if (dx==0 && dy==0 && dz==0) return false;
        
        vektor[0] = dx; vektor[1] = dy; vektor[2] = dz;
        return true;
    }
    
    public String getMeldung() {
        return meldung;
    }
    
    private void zentriere(java.awt.Frame hf) {
        java.awt.Point OL = hf.getLocationOnScreen();
        OL.translate(hf.getWidth()/2, 10);
        OL.translate(-this.getWidth()/2, 0);
        if (OL.getX() < 0) OL.setLocation(0, OL.getY());
        if (OL.getY() < 0) OL.setLocation(OL.getX(), 0);
        this.setLocation(OL);
    }
    
    private String tr(String key) {
        String übersetzt;
        try {übersetzt = addinsRB.getString(key);}
        catch (MissingResourceException e) {
            System.err.println("Schlüsselwort + " + key + " nicht gefunden für " + locale.toString() + " ; " + e.toString());
            return key;
        }
        return übersetzt;
    }
    
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField feldN;
    private javax.swing.JTextField feldStabnr;
    private javax.swing.JTextField feldX;
    private javax.swing.JTextField feldY;
    private javax.swing.JTextField feldZ;
    private javax.swing.JTextField felddx;
    private javax.swing.JTextField felddy;
    private javax.swing.JTextField felddz;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton knopfBerechnen;
    private javax.swing.JButton knopfNichtstun;
    private javax.swing.JLabel lbNr;
    // End of variables declaration//GEN-END:variables
    
}
